version: "3.9"

services:
  app:
    container_name: smart-air-conditioning
    build:
      context: ..
      dockerfile: ./docker/app.Dockerfile
      args:
        - BE_URN=${APP_BE_URN}
        - IS_SECURE=${APP_IS_SECURE}
    environment:
      API_TOKEN: ${APP_API_TOKEN}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASS: ${MQTT_PASS}
      DB_URI: ${DB_URI}
      DB_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      DB_ORG: ${INFLUXDB_ORG}
      DB_BUCKET: ${INFLUXDB_BUCKET}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    restart: unless-stopped
    ports:
      - "8080:8080"

  pyspark-mq135:
    container_name: pyspark-mq135
    image: if4051-pyspark
    build:
      context: ..
      dockerfile: ./docker/pyspark.Dockerfile
      args:
        - USER_NAME=spark
        - USER_ID=${USER_ID}
    volumes:
      - ../data-pipeline/pyspark/:/pyspark:rw
    working_dir: /pyspark
    environment:
      SENSOR: mq135
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASS: ${MQTT_PASS}
      DB_URI: ${DB_URI}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
    restart: unless-stopped
    # depends_on:
    #   - mosquitto
    #   - kafka

  pyspark-dht22:
    container_name: pyspark-dht22
    image: if4051-pyspark
    volumes:
      - ../data-pipeline/pyspark/:/pyspark:rw
    working_dir: /pyspark
    environment:
      SENSOR: dht22
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASS: ${MQTT_PASS}
      DB_URI: ${DB_URI}
      KAFKA_BOOTSTRAP_SERVER: ${KAFKA_BOOTSTRAP_SERVER}
    restart: unless-stopped
    depends_on:
      - pyspark-mq135
    #   - mosquitto
    #   - kafka

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    volumes:
      - ../mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ../mosquitto/passwd:/mosquitto/config/passwd
      - ../mosquitto/logs:/mosquitto/logs
      - mosquitto_data:/mosquitto/data
    ports:
      - "1883:1883"
    restart: unless-stopped

  zookeeper:
    container_name: zookeeper
    image: zookeeper:3.8.1
    restart: unless-stopped
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      DOCKER_API_VERSION: 1.22
      KAFKA_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://${KAFKA_OUTSIDE_HOST}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      # KAFKA_LISTENERS: INSIDE://kafka:29092
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "dht22:1:1,mq135:1:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis
    command: redis-server --requirepass '${REDIS_PASSWORD}'
    ports:
      - "6379:6379"

  influxdb:
    container_name: influxdb
    image: influxdb:2.7-alpine
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      DOCKER_INFLUXDB_INIT_RETENTION: 3d
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    restart: unless-stopped

  telegraf:
    container_name: telegraf
    image: telegraf:1.26-alpine
    environment:
      INFLUX_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      INFLUX_ORG: ${INFLUXDB_ORG}
      INFLUX_BUCKET: ${INFLUXDB_BUCKET}
      MQTT_HOST: ${MQTT_HOST}
      MQTT_PORT: ${MQTT_PORT}
      MQTT_USER: ${MQTT_USER}
      MQTT_PASS: ${MQTT_PASS}
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
    restart: unless-stopped
    depends_on:
      - influxdb

volumes:
  mosquitto_data:
  influxdb_data:
